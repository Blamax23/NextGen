@using NextGen.Model;
@using SixLabors.ImageSharp;

@model List<ActualiteWithSource>;

@{
    ViewData["Title"] = "Home Page";
}

<link rel="stylesheet" href="~/css/Actualite.css" />

<div class="content">
    <h2>Actualités</h2>
    <div class="tableau">
        @if (User.Identity.IsAuthenticated)
        {
            <div class="add-actualite-container">
                <button id="btnAddActualite" class="btn btnAddActualite" onclick="toggleForm()">
                    <div class="button-text">
                        Ajouter une actualité
                    </div>
                    <div class="button-more">
                        <i class="bi bi-plus-lg"></i>
                    </div>
                </button>
                <form asp-action="AddActualite" method="post" enctype="multipart/form-data" class="actualite-form" id="formAddActualite" style="display: none;">
                    <div class="title-zone">
                        <input type="text" name="Titre" id="actualiteTitle" class="inputTitre" placeholder="Titre de l'actualité" required />
                    </div>
                    <div class="content-zone">
                        <textarea name="Contenu" class="form-control inputContenu" id="actualiteContent" placeholder="Contenu de l'actualité"></textarea>
                        <div class="upload-container" id="uploadContainer">
                            <div class="drop-area" id="dropArea">
                                Glissez-déposez vos fichiers ici
                            </div>
                            <input type="file" name="Sources" id="actualiteSources" multiple style="display: none;" onchange="handleFiles(this.files)">
                        </div>
                        <div id="previewContainer" class="preview-container"></div>
                    </div>
                    <div class="btns-close">
                        <button type="button" class="btn btn-danger" onclick="toggleForm()">Annuler</button>
                        <button type="submit" class="btn btn-success">Enregistrer</button>
                    </div>
                </form>
            </div>
        }
        @foreach (var actualite in Model)
        {
            var rgbColor = actualite.User.StringToRgb();
            <div class="actualite">
                <div class="title-zone">
                    <div class="head-zone">
                        <h3>@actualite.Actualite.Titre</h3>
                        <p>@actualite.Actualite.ReturnDateModification()</p>
                    </div>
                    <div class="user-zone">
                        <i class="bi bi-person-circle" style="color: @rgbColor ;"></i>
                        <p>@actualite.User.FirstName</p>
                    </div>
                </div>
                <div class="content-zone">
                    @if (!string.IsNullOrWhiteSpace(actualite.Actualite.Contenu))
                    {
                        <div class="text-zone">
                            <p>@actualite.Actualite.Contenu</p>
                        </div>
                    }
                    @if (actualite.Source != null && actualite.Source.Count() > 0)
                    {
                        <div class="source-zone" id="actualite@(actualite.Id)">
                            @if (actualite.Source.Count() > 1)
                            {
                                <div class="arrow arrow-left" onclick="changeSource(-1, @(actualite.Id))"></div>
                            }
                            <div class="carouselSources">
                                <div class="carouselContainer">
                                    @for (int i = 0; i < actualite.Source.Count(); i++)
                                    {
                                        var source = actualite.Source.ElementAt(i);
                                        <div class="sourceContainer" data-index="@i">
                                            @if (source.Type == "image")
                                            {
                                                <img class="imgArticle" src="@Url.Content(source.Path)" alt="Image" />
                                            }
                                            @if (source.Type == "video")
                                            {
                                                <video controls class="videoArticle">
                                                    <source src="@Url.Content(source.Path)" type="video/mp4" />
                                                    Your browser does not support the video tag.
                                                </video>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                            @if (actualite.Source.Count() > 1)
                            {
                                <div class="arrow arrow-right act@(actualite.Id)" onclick="changeSource(1, @(actualite.Id))"></div>
                            }
                        </div>
                    }
                </div>
                <!--Bouton qui renvoie vers l'action de suppression de l'article-->
                @if (User.Identity.IsAuthenticated)
                {
                    <div class="delete" style="display: flex; justify-content: right; margin: 0 1em 1em 0;">
                        <a href="@Url.Action("DeleteActualite", "Actualite", new { id = actualite.Actualite.Id })" class="deleteBtn btn btn-danger">Supprimer</a>
                    </div>
                }
            </div>
        }
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        function toggleForm() {
            var btn = document.getElementById("btnAddActualite");
            var form = document.getElementById("formAddActualite");
            if (form.style.display === "none") {
                form.style.display = "block";
                btn.style.display = "none";
            } else {
                form.style.display = "none";
                btn.style.display = "flex";
            }
        }

        let currentIndex = 0;

        function changeSource(direction, idActualite) {
            const actualite = $("#actualite" + idActualite);
            console.log(actualite);
            const sources = actualite.find('.sourceContainer');

            moveCarousel(direction, sources, idActualite);
        }

        function moveCarousel(direction, sources, idActualite) {
            currentIndex += direction; // Met à jour l'indice en fonction de la direction
            // Boucle pour rester dans les limites
            if (currentIndex < 0) {
                currentIndex = sources.length - 1; // Retourne à la dernière source
            } else if (currentIndex >= sources.length) {
                currentIndex = 0; // Retourne à la première source
            }

            // Récupérer la largeur de la première source
            const width = sources[0].clientWidth;
            const offset = -currentIndex * width; // Calcule le déplacement du carrousel
            const actualite = $("#actualite" + idActualite);
            const carouselSources = actualite.find('.carouselSources');
            console.log(carouselSources);
            const carouselContainer = carouselSources.find('.carouselContainer');
            console.log(carouselContainer);

            if (carouselContainer.length > 0) {
                console.log("oui");
                // Convertir en élément DOM pour utiliser les propriétés
                const carouselContainerDOM = carouselContainer[0];

                // Applique le décalage avec une transition fluide
                carouselContainerDOM.style.transform = `translateX(${offset}px)`;
                carouselContainerDOM.style.transition = 'transform 0.5s ease';
            } else {
                console.error("carouselContainer is not found.");
            }
        }

        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('actualiteSources');
        const previewContainer = document.getElementById('previewContainer');

        // Utilisation de DataTransfer pour maintenir une liste de fichiers persistante
        let dt = new DataTransfer();

        // Empêche le comportement par défaut lors du dragover
        dropArea.addEventListener('dragover', (event) => {
            event.preventDefault();
        });

        // Gestion du drop des fichiers dans la zone de drop
        dropArea.addEventListener('drop', (event) => {
            event.preventDefault();
            const files = event.dataTransfer.files;
            addFilesToDataTransfer(files); // Ajoute les fichiers
        });

        // Ouvre l'explorateur de fichiers lorsqu'on clique sur la zone de drop
        dropArea.addEventListener('click', () => {
            fileInput.click();
        });

        // Gestion de l'ajout de fichiers via l'explorateur de fichiers
        fileInput.addEventListener('change', (event) => {
            const files = fileInput.files;
            addFilesToDataTransfer(files); // Ajoute les fichiers
        });

        function addFilesToDataTransfer(files) {
            // Parcourt les nouveaux fichiers et les ajoute à DataTransfer sans réinitialiser
            [...files].forEach(file => {
                dt.items.add(file);
                previewFile(file); // Ajoute un aperçu du fichier
            });
            updateInputFiles(); // Mets à jour l'input avec les nouveaux fichiers
        }

        function previewFile(file) {
            const fileReader = new FileReader();
            fileReader.onload = () => {
                const fileContainer = document.createElement('div');
                fileContainer.classList.add('file-container');

                // Affichage de l'aperçu du fichier
                if (file.type.startsWith('image/')) {
                    const img = document.createElement('img');
                    img.src = fileReader.result;
                    fileContainer.appendChild(img);
                } else if (file.type.startsWith('video/')) {
                    const video = document.createElement('video');
                    video.controls = true;
                    video.src = fileReader.result;
                    fileContainer.appendChild(video);
                }

                // Ajoute une icône de suppression
                const deleteIcon = document.createElement('i');
                deleteIcon.className = "bi bi-trash delete-icon";
                deleteIcon.onclick = () => {
                    fileContainer.remove();
                    removeFile(file); // Supprime le fichier si on clique sur la poubelle
                };
                fileContainer.appendChild(deleteIcon);

                // Ajoute l'aperçu dans la zone dédiée
                previewContainer.appendChild(fileContainer);
            };
            fileReader.readAsDataURL(file);
        }

        function updateInputFiles() {
            // Met à jour le fileInput avec les fichiers dans DataTransfer
            fileInput.files = dt.files;
        }

        function removeFile(fileToRemove) {
            // Supprime un fichier du DataTransfer
            const newDataTransfer = new DataTransfer();
            [...dt.files].forEach(file => {
                if (file !== fileToRemove) {
                    newDataTransfer.items.add(file); // Ajoute les fichiers sauf celui à supprimer
                }
            });
            dt = newDataTransfer; // Remplace l'ancien DataTransfer par le nouveau
            updateInputFiles(); // Met à jour l'input
        }


    </script>
}